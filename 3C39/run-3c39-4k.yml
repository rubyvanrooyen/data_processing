schema_version: 1.0.4

# Compulsory worker to set up data/input/output directories.
# The prefix used for the output data products (e.g., diagnostic plots, images, etc.).
general:
  prefix: 3C39
  title: 3C39
  rawdatadir: data
  output: output-4k-3c39
#   cabs:
#     - name: shadems_direct
#       tag: 1.7.1

# Compulsory worker to specify the input .MS files.
getdata:
  dataid: [1627186156_sdp_l0]
  extension: ms

# Compulsory worker to set up target/calibrators names.
obsconf:
  refant: auto

# Split calibrators-only .MS files, one per input .MS file.
# This worker splits the calibrators (in preparation for cross-calibration) or the targets (in
# preparation for imaging) to new .MS files. Time and frequency averaging is available, as well as
# phase rotation to a new phase centre. Crosscalibration can be applied on the fly while splitting.
transform:
  enable: true
  label_out: cal
  field: calibrators
  split_field:
    enable: true
    col: data

# Prepare the calibrators-only .MS files for processing.
prep:
  enable: true
  label_in: cal
  field: calibrators
  specweights:
    enable: true
    mode: uniform

# Flag the calibrators-only .MS files.
flag:
  enable: true
  field: calibrators
  label_in: cal
  flag_autocorr:
    enable: true
  flag_spw:
    enable: true
    chans: '*:856~880MHz , *:1658~1800MHz, *:1419.8~1421.3MHz'
    ensure_valid: false
  flag_mask:
    enable: true
    mask: meerkat.rfimask.npy
    uvrange: '0~1000'
#   flag_manual:
#     enable: true
#     rules:
#       - '1557* antenna:m007'
#      - '1557* scan:49'
#      - '1568* antenna:m024;m036'
#      - '1568* scan:35 uvrange:1000~9000'

# Flag RFI using AOFlagger, Tricolour, or CASA FLAGDATA with tfcrop.
flag__rfi:
  enable: true
  field: calibrators
  label_in: cal
  flag_rfi:
    enable: true
    flagger: tricolour
    tricolour:
      strategy: khruschev.yaml

# Derive the cross-calibration tables and apply them to the calibrators.
# Carry out Cross calibration of the data (delay, bandpass and gain calibration).
crosscal:
  enable: true
  uvrange: '>150'
  label_in: 'cal'
  label_cal: '1gc1'
  set_model:
    enable: true
    meerkat_skymodel: false
  primary:
    reuse_existing_gains: true
    order: KGBAKGB
    combine: ["", "", "", null, "", "", ""]
    solint: [inf, inf, inf, null, int, int, inf]
    calmode: [a, ap, ap, null, a, ap, ap]
    b_fillgaps: 70
    plotgains: true
  secondary:
    reuse_existing_gains: true
    order: KGAKF
    apply: B
    combine: ["", "", null, "", ""]
    solint: [inf, inf, null, 60s, 60s]
    calmode: [a, ap, null, a, ap]
    plotgains: true
  apply_cal:
    applyto:
      - gcal
      - bpcal

# This worker plot the visibilities for diagnostic purpose. 
# Inspect the calibrated calibratorâ€™s visibilities to check the quality of the
# cross-calibration.
inspect:
  enable: true
  label_in: 'cal'
  field: 'calibrators'
  label_plot: '1gc'
  dirname: crosscal
  correlation: all
  standard_plotter: none # ragavi_vis
  shadems:
    enable: true
    default_column: CORRECTED_DATA
    plots:
      - desc: "plots by field"
        field: "{all_fields}"
        cnum: 100  # up 100 colours
        iter_field: true
        plots:
          # phaseball plots
          - dir: "phaseballs-{msbase}"
            plots:
              - "-x real -y imag -c CORR --corr IQUV --hline 0: --vline 0:"
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          - dir: "phaseballs-bycorr-{msbase}"
            iter_corr:
            plots:
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          # normalized phaseballs
          - dir: "normballs-{msbase}"
            col: "CORRECTED_DATA/MODEL_DATA"
            corr: "XX,YY"
            iter_corr:
            plots:
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          # block and triangle plots
          - dir: "blockplots-{msbase}"
            plots:
              - "-x BASELINE_M -y FREQ -c amp"
              - "-x ANTENNA1 -y ANTENNA2 -c SCAN_NUMBER --aaxis phase --ared std"
              - "-x ANTENNA1 -y ANTENNA2 -c SCAN_NUMBER --aaxis amp --ared mean"
          # amp/phase versus uv-distance, and uv-coverage coloured by amp/phase
          - dir: "uvdist-{msbase}"
            plots:
              - "-x UV -y amp    -c SCAN_NUMBER"
              - "-x UV -y amp    -c ANTENNA1"
              - "-x UV -y phase  -c ANTENNA1 --corr XX,YY"
              - "-x U  -y V      -c amp"
              - "-x U  -y V      -c phase --cmin -5 --cmax 5"
          # spectral plots
          - dir: "spectra-{msbase}"
            plots:
              - "-x FREQ  -y amp  -c SCAN_NUMBER"
              - "-x FREQ  -y amp  -c ANTENNA1"
              - "-x FREQ  -y real -c CORR --corr IQUV --hline 0:"
      # per-antenna plots
      - iter_ant:
        desc: "plots by antenna"
        cmap: pride
        corr: XX,YY
        plots:
          - '-x FREQ -y amp:I -c SCAN_NUMBER --cnum 100 --cmin 0 --cmax 30 --field {bpcal} --dir bpcal-iamp-byant-{msbase}'
          - '-x FREQ -y SCAN_NUMBER -a amp --ared std --dir stdamp-byant-{msbase}'
          - '-x FREQ -y SCAN_NUMBER -a phase --ared std --dir stdphase-byant-{msbase}'
      # per-scan plots
      - iter_scan:
        desc: "plots by scan"
        cmap: pride
        ared: std
        corr: XX,YY
        plots:
          - '-x ANTENNA1 -y ANTENNA2 -a amp --dir stdamp-byscan-{msbase}'
          - '-x ANTENNA1 -y ANTENNA2 -a phase --dir stdphase-byscan-{msbase}'
          - '-x BASELINE_M -y FREQ -a imag --amin 0 --amax 2 --dir stdimag-byscan-{msbase}'
    ignore_errors: true

# Split target-only .MS files, one per input .MS file and target, applying the
# cross-calibration on the fly.
transform__target:
  enable: true
  label_out: &CORR corr
  split_field:
    enable: true
    chan_avg: 4
    otfcal:
      enable: true
      label_cal: '1gc1'
      interpolation:
        delay_cal: nearest
        gain_cal: linear

# Prepare the target-only .MS files for processing.
prep__target:
  enable: true
  label_in: *CORR
  field: target
  specweights:
    enable: true
    mode: uniform

# Flag the target-only .MS files.
flag__target:
  enable: true
  field: target
  label_in: *CORR
  flag_spw:
    enable: true
    chans: '*:856~880MHz , *:1658~1800MHz, *:1419.8~1421.3MHz'
#    chans: '*:856~940MHz, *:1180~1300MHz, *:1658~1800MHz, *:1419.8~1421.3MHz'
    ensure_valid: false
  flag_mask:
    enable: true
    mask: meerkat.rfimask.npy
    uvrange: '0~1000'
#   flag_manual:
#     enable: true
#     rules:
#       - '1557* antenna:m007'
#       - '1568* antenna:m024;m036'
  inspect:
    enable: false
    field: target

flag__target_rfi:
  enable: true
  field: target
  label_in: *CORR
  flag_rfi:
    enable: true
    flagger: tricolour
    tricolour:
      strategy: khruschev.yaml

# This worker creates an a-priori clean mask based on NVSS or SUMSS, to be used during the continuum
# imaging/self-calibration loop.
mask:
  enable: false

# This worker performs continuum imaging and standard (i.e., direction-independent) self-calibration.
# Make a continuum image of each target, self-calibrate, and transfer both gains
# and continuum model to the full-frequency-resolution target-only .MS files.
selfcal:
  enable: true
  img_npix: 10000
  img_cell: 0.8
  img_nchans: 8
  img_multiscale: false
  img_niter: 100000
  img_specfit_nrcoeff: 4
  cal_timeslots_chunk: 12
  image:
    enable: true
  calibrate:
    enable: true
    gsols_timeslots: [4]
    gsols_chan: [256]
    gain_matrix_type: [GainDiagPhase, GainDiagPhase]
  cal_cubical:
    dist_max_chunks: 12
  transfer_model:
    enable: false

# Perform direction-dependent calibration on the data
ddcal:
  enable: false
  label_in: 'corr'
  use_pb: true
  calibrate_dd:
    enable: True
    de_sources_mode: manual
  copy_data:
    enable: true
  image_wsclean:
    enable: true
  transfer_model_dd:
    enable: true


# -fin-
