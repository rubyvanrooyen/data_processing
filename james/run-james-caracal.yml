## Standard required input workers (always include in all yaml configs)
# This script describes MeerKAT data reduction using CARACAL to read, flag, calibrate, continuum
# subtract, and image the data.
# Plotting for datasets with ShameMS and viewing with radio padre
# This is a pipeline script and designed to be executed an a full config
# or selected workers

schema_version: 1.0.4


## Generate MS for calibration
# Compulsory worker to set up data/input/output directories.
# The prefix used for the output data products (e.g., diagnostic plots, images, etc.).
general:
  prefix: H1_james
  title: H1_james
  # Location where CARACal will write and expect to find .MS files
  msdir: msdir
  # This directory and the input .MS files within it can be read-only
  rawdatadir: ms-orig
  # Location where CARACal writes output products
  output: output-H1-james-4k

# Compulsory worker to specify the input .MS files.
getdata:
  dataid: [1625501775_sdp_l0]
  extension: ms

# Compulsory worker to set up target/calibrators names.
obsconf:
  refant: auto


## Processing calibrators
# Calibrators-only .MS file
# Split calibrators-only .MS files, one per input .MS file.
# This worker splits the calibrators (in preparation for cross-calibration) or the targets (in
# preparation for imaging) to new .MS files. Time and frequency averaging is available, as well as
# phase rotation to a new phase centre. Crosscalibration can be applied on the fly while splitting.
# For calibration average down to the wideband 4096 channels
# Factor 8 averaging if all channels are available
transform__calibrators:
  enable: true
  label_out: cal
  field: calibrators
  split_field:
    enable: true
    chan_avg: 8
    col: data

# Prepare the calibrators-only .MS files for processing.
prep__calibrators:
  enable: true
  label_in: cal
  field: calibrators
  fixuvw:
    enable: true
  clearcal: true
  specweights:
    enable: true
    mode: uniform


## Initial inspection and flagging
# Make an inital amplitude vs. channel plot of the bandpass calibrator averaging all the data
# together in time.
# Next plot phase vs. channel.
# Now plot amplitude and phase as a function of time.
# 0a. Flag out band edges
# 0b. Automated flagging for shadowing, elevation and extreme outliers
# 0c. Flagging of identified bad data
# Check that bad data is gone
flag__calibrators:
  enable: true
  label_in: cal
  field: calibrators
  flag_rfi:
    enable: true
    flagger: aoflagger
  flag_autocorr:
    enable: true
  flag_shadow:
    enable: true
  flag_spw:
    enable: true
    # flagging out RFI channels from TM memo
    chans: '*:856MHz~960MHz,*:1080MHz~1095MHz,*:1166MHz~1300MHz,*:1375MHz~1387MHz,*:1419.8MHz~1421.3MHz,*:1526MHz~1554MHz,*:1565MHz~1585MHz,*:1592MHz~1610MHz,*:1616MHz~1626MHz,*:1658MHz~1800MHz'
    ensure_valid: false
  flag_mask:
    enable: true
    mask: meerkat.rfimask.npy
    uvrange: '0~500'


# Derive the cross-calibration tables and apply them to the calibrators.
# Carry out Cross calibration of the data (delay, bandpass and gain calibration).
crosscal:
  enable: true
  label_in: cal
  label_cal: 1gc
  uvrange: '>150'
  set_model:
    enable: true
  primary:
    reuse_existing_gains: false
    order: KGBAKGB
    combine: ["scan,field", "", "scan,field", null, "", "", "scan"]
    solint: [inf, inf, inf, null, int, int, inf]
    calmode: [ap, ap, ap, null, ap, ap, ap]
    b_fillgaps: 70
    b_smoothwindow: 32
    plotgains: true
  secondary:
    reuse_existing_gains: false
#     order: KGAKG
    order: KGAKF
    apply: B
    combine: ["scan,field", "", null, "", ""]
    solint: [inf, inf, null, int, int]
    calmode: [ap, ap, null, ap, ap]
    plotgains: true
  apply_cal:
  # Although in previous steps solutions were applied "on-the-fly", the data were not actually
  # changed. Running applycal will fill the corrected data column in the ms. Again be careful with
  # specification of gaintable, and keeping the same order in spwmap and gainfield.
    applyto:
      - fcal
      - bpcal
      - gcal


# This worker plot the visibilities for diagnostic purpose.
# Inspect the calibrated calibratorâ€™s visibilities to check the quality of the
# cross-calibration.
inspect:
  enable: true
  label_in: cal
  field: calibrators
  label_plot: 'plot_1gc'
  dirname: crosscal
  correlation: all
  standard_plotter: none
  shadems:
    enable: true
    default_column: CORRECTED_DATA
    plots:
      - desc: "plots by field"
        field: "{all_fields}"
        cnum: 100  # up 100 colours
        iter_field: true
        plots:
          # phaseball plots
          - dir: "phaseballs-{msbase}"
            plots:
              - "-x real -y imag -c CORR --corr IQUV --hline 0: --vline 0:"
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          - dir: "phaseballs-bycorr-{msbase}"
            iter_corr:
            plots:
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          # normalized phaseballs
          - dir: "normballs-{msbase}"
            col: "CORRECTED_DATA/MODEL_DATA"
            corr: "XX,YY"
            iter_corr:
            plots:
              - "-x real -y imag -c SCAN_NUMBER"
              - "-x real -y imag -c ANTENNA1"
          # block and triangle plots
          - dir: "blockplots-{msbase}"
            plots:
              - "-x BASELINE_M -y FREQ -c amp"
              - "-x ANTENNA1 -y ANTENNA2 -c SCAN_NUMBER --aaxis phase --ared std"
              - "-x ANTENNA1 -y ANTENNA2 -c SCAN_NUMBER --aaxis amp --ared mean"
          # amp/phase versus uv-distance, and uv-coverage coloured by amp/phase
          - dir: "uvdist-{msbase}"
            plots:
              - "-x UV -y amp    -c SCAN_NUMBER"
              - "-x UV -y amp    -c ANTENNA1"
              - "-x UV -y phase  -c ANTENNA1 --corr XX,YY"
              - "-x U  -y V      -c amp"
              - "-x U  -y V      -c phase --cmin -5 --cmax 5"
          # spectral plots
          - dir: "spectra-{msbase}"
            plots:
              - "-x FREQ  -y amp  -c SCAN_NUMBER"
              - "-x FREQ  -y amp  -c ANTENNA1"
              - "-x FREQ  -y real -c CORR --corr IQUV --hline 0:"
      # per-antenna plots
      - iter_ant:
        desc: "plots by antenna"
        cmap: pride
        corr: XX,YY
        plots:
          - '-x FREQ -y amp:I -c SCAN_NUMBER --cnum 100 --cmin 0 --cmax 30 --field {bpcal} --dir bpcal-iamp-byant-{msbase}'
          - '-x FREQ -y SCAN_NUMBER -a amp --ared std --dir stdamp-byant-{msbase}'
          - '-x FREQ -y SCAN_NUMBER -a phase --ared std --dir stdphase-byant-{msbase}'
      # per-scan plots
      - iter_scan:
        desc: "plots by scan"
        cmap: pride
        ared: std
        corr: XX,YY
        plots:
          - '-x ANTENNA1 -y ANTENNA2 -a amp --dir stdamp-byscan-{msbase}'
          - '-x ANTENNA1 -y ANTENNA2 -a phase --dir stdphase-byscan-{msbase}'
          - '-x BASELINE_M -y FREQ -a imag --amin 0 --amax 2 --dir stdimag-byscan-{msbase}'
    ignore_errors: true


## Extract calibrated target visibilities
# Imaging wideband target
# Target-only .MS file
# Split target-only .MS files, one per input .MS file and target, applying the
# cross-calibration on the fly.
transform__target:
  enable: true
  label_out: corr
  field: target
  split_field:
    enable: true
    otfcal:
      enable: true
      label_cal: 1gc
      interpolation:
        delay_cal: nearest
        bp_cal: nearest
        gain_cal: nearest


## Prepare the target-only .MS files for processing.
prep__target:
  enable: true
  label_in: corr
  field: target
  fixuvw:
    enable: true
  clearcal: true
  specweights:
    enable: true
    mode: uniform

flag__target:
  enable: true
  label_in: corr
  field: target
  flag_autocorr:
    enable: true
  flag_shadow:
    enable: true
  flag_spw:
    enable: true
    # flagging out RFI channels from TM memo
    chans: '*:856MHz~960MHz,*:1080MHz~1095MHz,*:1166MHz~1300MHz,*:1375MHz~1387MHz,*:1526MHz~1554MHz,*:1565MHz~1585MHz,*:1592MHz~1610MHz,*:1616MHz~1626MHz,*:1668MHz~1800MHz'
    ensure_valid: false
  flag_rfi:
    enable: true
    flagger: aoflagger
  inspect:
    enable: false
    field: target


mask:
  enable: false

transform__linetarget:
  enable: true
  label_in: 'corr'
  label_out: 'l'
  split_field:
    enable: true
    col: 'all'
    otfcal:
      enable: false

line:
  enable: true
  label_in: 'l'
  restfreq: '1.420405752GHz'
  subtractmodelcol:
    enable: false
  mstransform: 
    enable: true
    col: data
    doppler:
      enable: true
      telescope: meerkat
    uvlin:
      enable: true
      fitorder: 3
      fitspw: '*:1300~1417.2MHz,*:1421.0~1600MHz'
  make_cube:
    enable: true
    npix: [1800]
    cell: 3
    taper: 10
    robust: 0
  pb_cube:
    enable: true
  freq_to_vel:
    enable: true
  remove_stokes_axis:
    enable: true
  sofia:
    enable: true

# -fin-
