schema_version: 1.0.4


## Generate MS for calibration
# Compulsory worker to set up data/input/output directories.
# The prefix used for the output data products (e.g., diagnostic plots, images, etc.).
general:
  prefix: 3C39_comet
  title: 3C39_comet
  # Location where CARACal will write and expect to find .MS files
  msdir: msdir-smooth
  # This directory and the input .MS files within it can be read-only
  rawdatadir: ms-orig
  # Location where CARACal writes output products
  output: output-3c39-32k-smooth

# Compulsory worker to specify the input .MS files.
getdata:
  dataid: [1627186165_sdp_l0]
  extension: ms

# Compulsory worker to set up target/calibrators names.
obsconf:
  refant: auto
  obsinfo:
    enable: True
    plotelev:
      enable: True
      plotter: plotms


## Processing calibrators
# Narrow band zoom modes channelise the 32768 channels
# For calibration average down to the wideband 4096 channels
# Factor 8 averaging if all channels are available
transform__calibrators:
  enable: true
  label_out: cal
  field: calibrators
  split_field:
    enable: true
    chan_avg: 8
    col: data

# Prepare the calibrators-only .MS files for processing.
prep__calibrators:
  enable: true
  label_in: cal
  field: calibrators
  clearcal: true
  specweights:
    enable: true
    mode: uniform


## Initial inspection and flagging
# Make an inital amplitude vs. channel plot of the bandpass calibrator averaging all the data
# together in time.
# Next plot phase vs. channel.
# Now plot amplitude and phase as a function of time.
# 0a. Flag out band edges
# 0b. Automated flagging for shadowing, elevation and extreme outliers
# 0c. Flagging of identified bad data
# Check that bad data is gone
flag__calibrators:
  enable: true
  label_in: cal
  field: calibrators
  flag_autocorr:
    enable: true
  flag_shadow:
    enable: true
  flag_spw:
    enable: true
    # for narrow band only flag out the band edges
    # chans: '*:1630MHz~1657MHz,*:1673MHz~1700MHz'
    # these modes will prob be used for spectral lines, and flagged manually
    # add some edge flags to retain the clean central passband
    chans: '*:1630MHz~1657MHz,*:1673MHz~1700MHz,*:1657MHz~1661MHz'
    ensure_valid: false
  flag_scan:
    enable: true
    #scans: '2,23,27'
    scans: '23,27'
  flag_time:
    enable: true
    timerange: '2021/07/25/04:12:36.2946,2021/07/25/04:17:15.7058'
    ensure_valid: false

# Derive the cross-calibration tables and apply them to the calibrators.
# Carry out Cross calibration of the data (delay, bandpass and gain calibration).
crosscal:
  enable: true
  label_in: cal
  label_cal: 1gc
  uvrange: '>150'
  set_model:
    enable: true
    meerkat_skymodel: true
  primary:
    reuse_existing_gains: false
    order: KGBAKGB
    combine: ["scan", "spw", "scan,spw", null, "", "", "scan,spw"]
    solint: [inf, inf, inf, null, 60s, 60s, inf]
    calmode: [ap, ap, ap, null, ap, ap, ap]
    b_fillgaps: 70
    b_smoothwindow: 32
    plotgains: true
  secondary:
    reuse_existing_gains: false
    order: KGAKF
    apply: B
    combine: ["scan", "spw", null, "", ""]
    solint: [inf, int, null, int, int]
    calmode: [ap, ap, null, ap, ap]
    plotgains: true
  apply_cal:
    applyto:
      - fcal
      - gcal

inspect:
  enable: false
  label_in: cal
  field: calibrators
  label_plot: 'plot_1gc'
  dirname: crosscal
  correlation: all
  standard_plotter: none
  shadems:
    enable: false

## Extract calibrated target visibilities
# Prepare the target-only .MS files for processing.
# Split, average and/or calibrate the data.
transform__target:
  enable: true
  label_out: corr
  field: target
  split_field:
    enable: true
    otfcal:
      enable: true
      label_cal: 1gc
      interpolation:
        delay_cal: nearest
        bp_cal: nearest
        gain_cal: linear

prep__target:
  enable: true
  label_in: corr
  field: target
  specweights:
    enable: true
    mode: uniform

flag__target:
  enable: true
  label_in: corr
  field: target
  flag_autocorr:
    enable: true
  flag_shadow:
    enable: true
  flag_spw:
    enable: true
    chans: '*:1630MHz~1657MHz,*:1673MHz~1700MHz,*:1657MHz~1661MHz'
    ensure_valid: false
  inspect:
    enable: false
    field: target

flag__tgt_manual:
  enable: true
  label_in: corr
  field: target
  flag_scan:
    enable: true
    scans: '24'
  inspect:
    enable: false
    field: target

## Continuum imaging of target
transform__cont_target:
  enable: true
  label_in: corr
  label_out: cont
  field: target
  # average down channels for cont imaging
  split_field:
    enable: true
    chan_avg: 8
    col: data
    # not currently available for BPOLY calibrations tables
    otfcal:
      enable: false

# for continuum imaging, flag out the line frequencies, only retain diffuse emission
flag__cont_target:
  enable: true
  label_in: cont
  field: target
  flag_spw:
    enable: true
    # we know freq at lsrk, perhaps don't flag, not neccessary
    chans: '*:1.6653GHz~1.6663GHz,*:1.6673GHz~1.6683GHz'
    ensure_valid: false

## Continuum imaging of target
transform__flat_target:
  enable: true
  label_in: corr
  label_out: flat
  field: target
  # average down channels for cont imaging
  split_field:
    enable: true
    # corr spectral line output has 32768 channels
    # avg = 8: 4096 channels
    # avg = 32: 1024 channels
    chan_avg: 32
    col: data
    # not currently available for BPOLY calibrations tables
    otfcal:
      enable: false

mask:
  enable: false

# Important parameters to control memory usage of large data sets:
# ncpu, cal_timeslots_chunk, chan_chunk, dist_max_chunks 
selfcal:
  enable: true
#   label_in: cont
  label_in: flat
  # Number of CPUs to use for distributed processing. If set to 0 all available CPUs are used.
  # If set to 0 all available CPUs are used
  ncpu: 8
  # Number of pixels in output image (MeerKAT imsize>=8192)
  img_npix: 10000
  # Image pixel size in units of arcsec (MeerKAT cellsizei<='1.5arcsec')
  img_cell: 0.8
  # Number of cleaning iterations
  img_niter: 1000000
  # Type of image weighting, where the options are ‘briggs’, ‘uniform’, and ‘natural’.
  img_weight: briggs
  # Briggs robust value
  img_robust: -1.
  # Fraction of the peak that is cleaned in each minor iteration.
  img_gain: 0.1
  # Gain for major iterations in WSClean.
  img_mgain: 0.85
  # Switch on multiscale cleaning
  img_multiscale: true
  # Number of channels in output image
  # img_nchans: 4
  img_nchans: 8
  # Join channels to create MFS image
  img_joinchans: true
  # Number of spectral polynomial terms to fit to each clean component
  img_specfit_nrcoeff: 2
  # Chunk data up by this number of timeslots.
#   cal_timeslots_chunk: 360
  cal_timeslots_chunk: 120
  calibrate_with: "cubical"
  cal_cubical:
    shared_mem: 250Gb
    # chunk data up by number of channels
    # An upper limit on the frequency solution intervals (gsols_chan)
    # 0: use the full frequency axis
    # -1: use the largest solution interval
    # chan_chunk: -1
    chan_chunk: 0
    # chan_chunk: 128
    # dist_max_chunks: 4
    dist_max_chunks: 2
  # Stokes image to create
  img_stokes: I
  # Number of self-calibration iterations to perform
  cal_niter: 4
  # Imaging parameters
  image:
    enable: true
  # Calibration parameters
  calibrate:
    enable: true
    # Model number to use
    model: ['1','2','3','4']
    # Gain matrix type: ‘GainDiagPhase’ = phase-only calibration, ‘GainDiag’ = Amplitude + Phase
    gain_matrix_type: ['GainDiagPhase', 'GainDiagPhase', 'GainDiagPhase', 'GainDiag']
    # G-Jones frequency solution interval.
    # Should be a multiple of chan_chunk
    # 0 entails using a single solution for the full bandwidth
#     gsols_chan: [0, 2048, 2048, 128]
    gsols_chan: [0, 0, 0, 128]
    # G-Jones time solution interval
    gsols_timeslots: [120, 120, 60, 60]
  # Interpolate gains over the high frequency-resolution data
  transfer_apply_gains:
    enable: false
    # Label of cross-calibrated .MS file to which to transfer and apply the selfcal gains.
    transfer_to_label: corr
  # Transfer the model from the last WSClean imaging run to the MODEL_DATA column of another .MS
  transfer_model:
    enable: false
    # Label of the .MS file to which to transfer the model.
    transfer_to_label: corr

# The OH maser transition lines are split into a separate MS for processing.

## Split out 1665 OH line and build cube
## Build a smaller MS using channel averaging for line analysis
# For 54M mode the velocity resolution is approx = 0.297 km/s
# Assuming the maser line width is around 1 km/s the line amplitude will be distributed over 3 channels
# Since we are not looking at the line shape, but trying to find the total intensity variation of the line
# and if we can detect the line, average the data to combine the visibilities of 3 channel chunks
transform__line_1665:
  enable: true
  label_in: corr
  label_out: line1665
  field: target
  split_field:
    enable: true
    col: data
    chan_avg: 3
    # choose a large region the line may move 1.663GHz~1.666GHz
    spw: '*:14787~16628'
    otfcal:
      enable: false


## Split out 1667 OH line and build cube
transform__line_1667:
  enable: true
#   label_in: corr
  label_in: target
  label_out: line1667
  field: target
  split_field:
    enable: true
    col: data
    spw: '*:1.66662GHz~1.66915GHz' 
    otfcal:
      enable: false






# # image_line:
# #   enable: true
# #   label: 'l'
# #   restfreq: '1.420405752GHz'
# #   subtractmodelcol:
# #     enable: true
# #   make_cube:
# #     enable: true
# #     npix: [1800]
# #     cell: 3
# #     taper: 10
# #     robust: 0
# #   mstransform: 
# #     enable: true
# #     telescope: meerkat
# #     fitorder: 1
# # #    fitspw: '*:1300~1417.2MHz,*:1421.0~1600MHz'
# #   pb_cube:
# #     enable: true
# #   freq_to_vel:
# #     enable: false
# #   remove_stokes_axis:
# #     enable: true
# #   sofia:
# #     enable: true
# 

# -fin-
